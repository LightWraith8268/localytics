name: Deploy Localytics to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Using prebuilt assets/css/styles.css committed to the repo; no Tailwind build in CI

      - name: Validate Firebase secret
        env:
          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}
        run: |
          if [ -z "$FIREBASE_CONFIG_JSON" ]; then
            echo "::error::FIREBASE_CONFIG_JSON secret is missing or empty" && exit 1
          fi

      - name: Inject Firebase config from secret
        env:
          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}
        run: |
          mkdir -p assets/js
          node -e "const fs=require('fs'); let raw=process.env.FIREBASE_CONFIG_JSON||''; let cfg=null; function tryJSON(x){try{return JSON.parse(x)}catch(e){return null}} cfg=tryJSON(raw); if(!cfg){ const i=raw.indexOf('{'); const j=raw.lastIndexOf('}'); if(i>=0 && j>i){ const obj=raw.slice(i,j+1); try{ cfg=Function('return ('+obj+')')(); }catch(e){ const cleaned=obj.replace(/,\s*([}\]])/g,'$1'); cfg=tryJSON(cleaned); } } } if(!cfg||typeof cfg!=='object'){ console.error('Invalid FIREBASE_CONFIG_JSON. Provide a JSON object or snippet containing {...}.'); process.exit(1);} for (const k of ['apiKey','projectId','appId']){ if(!cfg[k]){ console.error('FIREBASE_CONFIG_JSON missing required field: '+k); process.exit(1);} } fs.writeFileSync('assets/js/firebase.js', 'export const firebaseConfig = '+JSON.stringify(cfg)+'; export default firebaseConfig;'); console.log('firebase.js written');"

      - name: Update cache-busting query strings (use centralized version)
        run: |
          set -euxo pipefail
          # Get current version from centralized version.json
          if [ -f version.json ]; then
            CURRENT_VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('version.json')).version)")
            CURRENT_TIMESTAMP=$(node -e "console.log(JSON.parse(require('fs').readFileSync('version.json')).timestamp)")
            echo "Using centralized version: ${CURRENT_VERSION} (${CURRENT_TIMESTAMP})"
          else
            # Fallback for legacy setups
            CURRENT_VERSION="1.2.60"
            CURRENT_TIMESTAMP="20250930"
            echo "Using fallback version: ${CURRENT_VERSION}"
          fi

          # Update query strings in index.html to current version for cache busting
          sed -i -E "s|(\./)?assets/css/styles\.css(\?v=[^'\"&]*)?(&t=[^'\"]*)?|./assets/css/styles.css?v=${CURRENT_VERSION}&t=${CURRENT_TIMESTAMP}|g" index.html
          sed -i -E "s|(\./)?assets/js/app\.js(\?v=[^'\"&]*)?(&t=[^'\"]*)?|./assets/js/app.js?v=${CURRENT_VERSION}&t=${CURRENT_TIMESTAMP}|g" index.html

      - name: Stamp Service Worker with build id (force update)
        run: |
          echo "/* build: ${GITHUB_SHA} $(date -u +'%Y-%m-%dT%H:%M:%SZ') */" >> service-worker.js

      - name: Verify versions
        continue-on-error: true
        run: |
          set -euxo pipefail
          echo "HEAD=$(git rev-parse --short HEAD)"
          echo "Files at root:" && ls -la || true
          if [ -f version.json ]; then
            CENTRALIZED_VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('version.json')).version)" || echo "unknown")
            echo "Centralized version: $CENTRALIZED_VERSION"
          else
            echo "No version.json found - using legacy version detection"
          fi
          SW_VERSION=$(sed -n "s/^let VERSION = 'wb-\([^']*\)';/\1/p" service-worker.js || echo "unknown")
          echo "Service Worker version: $SW_VERSION"
          echo "Centralized versioning system active"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare dist directory
        run: |
          rm -rf dist
          mkdir -p dist
          cp -r index.html 404.html manifest.webmanifest service-worker.js version.json assets dist/
          if [ -f .nojekyll ]; then cp .nojekyll dist/.nojekyll; fi
          echo "Dist contents:" && find dist -maxdepth 2 -type f -printf "%p\n" 2>/dev/null || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
